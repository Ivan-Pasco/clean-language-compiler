Clean Language – Syntax Rule Summary (Revised)

📌 Every Clean program starts by running the method `start()`. This method must be defined at the top level of your Clean program file. It is the main entry point for execution, like `main()` in other languages.

Only one `start()` method should exist per project.

This lets you focus on what objects *do*, not what they *are named*.

Make sure to include it when you want your code to execute.

**Example:**

```
start()
  print "Welcome to Clean Language!"
  print "This is the beginning of your program."
```

📄 File Extensions Main files end in .cln Support files (same base name): .html, .css, .test

---

💨 Print Instructions

* `print`: prints with a newline
* `printl`: prints on the same line
* Strings are concatenated automatically; no `+` needed
* Use `{{ ... }}` for string interpolation

Examples: print "Hello, world!" printl "Loading..." printl " Done." print "Welcome, {{ name }}!" print "Total: {{ price \* quantity }} units."

---

🴢 Comments

* Single-line: `//`
* Multi-line: `/* ... */`

---

🔠 Data Types

**Signed vs Unsigned:**

* Signed: allows positive and negative values
* Unsigned: allows only positive values and zero

**Basic Types:**

| Type    | Description                         | Default |
| ------- | ----------------------------------- | ------- |
| boolean | `true` or `false`, case-insensitive | false   |
| string  | Text in double quotes               | ""      |
| byte    | 8-bit unsigned integer              | 0       |
| number  | 64-bit floating point               | 0.0     |
| integer | 32-bit signed integer               | 0       |

**Extended Types (Advanced Use):**

| Type     | Description              | Use Case                        |
| -------- | ------------------------ | ------------------------------- |
| unsigned | 32-bit unsigned integer  | Indexing, counters, crypto      |
| long     | 64-bit signed integer    | File offsets, large counters    |
| big      | 128-bit signed integer   | Precise calculations, crypto    |
| ulong    | 64-bit unsigned integer  | Hashing, crypto, large indexing |
| ubig     | 128-bit unsigned integer | Cryptographic key operations    |

---

🧾 Rules for Declaring Variables

* 🧱 Every class and function begins with a **setup block**, which includes `constants:`, `input:`, `description:`, and variable declarations. This block prepares everything needed before any logic runs.
* 📏 Always leave a blank line **after the setup block**, before writing any logic. This keeps the structure clean and easy to read.

**Examples:**

```
class Config
  constants:
    string:
      - version = "1.0.0"
    number:
      - maxUsers = 100

class User
  public
    string:
      - name = "John"
      - email = "user@example.com"
    integer:
      - age = 25

functions:
  calculateBonus() returns number
    number:
      - base = 100
      - multiplier = 1.5

    return base * multiplier
```

---

🗓️ Arrays

```
number[] numbers = 1,2,3,4
string[] letters = 'a','b','c'
print numbers[1]
print letters.count

number[][] matrix = [ [1, 2], [3, 4] ]
print matrix[1][2]

string[][] phrases = [ ["hi"], ["hello", "world"] ]
print phrases[2][1]
```

---

➕ Operators

* Left-to-right evaluation
* Parentheses required for expressions with multiple operators
* No implicit coercion (except in `print`)

**Helpers:**

```
string toString(number n)
number toNumber(string s)
```

**Operators:** `+`, `-`, `*`, `/`, `<`, `>`, `is`, `not`, `<=`, `>=`, `and`, `or`

---

🔄 Control Structures

```
if x is true
  print "OK"

a = from 1 to 9
a = from 1 to 9 step 2

iterate colors in c
  print c
```

---

🪩 Functions

* Defined inside `functions:` block
* Use `input:` for parameters
* `returns` is optional; assumed void if omitted

```
class Math
  public
    number base

  functions:
    setBase()
      description: Sets a new base value
      input:
        number b = 0

      number result = b
      base = result

    addToBase() returns number
      description: Adds a number to base and returns the result
      input:
        number x = 0

      number total = base + x
      return total
```

---

📅 Classes

* System-defined classes (e.g. `Global`, `Math`) must include `description:`
* Optional for user-defined classes

**Inheritance:** Clean uses single inheritance. A class can only inherit from one other class. This keeps class design simple and avoids confusion from multiple inheritance chains.

**Behavior by Method (duck typing):** Clean supports what's called *duck typing*. If something has the methods you're trying to use, it works — regardless of its class name. For example:

```
object something:
  string name = "Rubber Duck"
  quack()
    print "Quack!"

something.quack()  // This works because 'something' has a 'quack' method.
```

This is called **static duck typing** — you can use any object as long as it has the methods you need.

```
class Car
  description: Represents a car with attributes
  public
    string color = "red"
    unsigned wheels = 4
  private
    static integer serialNumber = 45

  constructor()
    input:
      string c = ""
      unsigned w = 0

    color = c
    wheels = w

  functions:
    accelerate()
      description: Increases speed

      if speed < 100
        speed++

    getSpeed() returns number
      description: Returns current speed

      number result = speed
      return result
```

📘 Inheritance and Duck Typing in Action

**Example of inheritance:**

```
class Vehicle
  public
    number speed = 0

  functions:
    move()
      speed = speed + 10

class Bike basedOn Vehicle
  public
    string type = "mountain"
``` 