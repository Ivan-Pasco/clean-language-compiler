// Comprehensive test of module system and async programming
import:
	MathUtils
	StringOps as StrOps
	FileReader

function calculateInBackground(array numbers) -> integer background
	// Heavy computation that runs in background
	integer total = 0
	iterate num in numbers
		total = total + MathUtils.pow(num, 2)
	return total

function processTextAsync(string input) -> string background
	// Async text processing using imported string operations
	if StrOps.isEmpty(input) then
		return "Empty input processed"
	else
		string upper = StrOps.toUpperCase(input)
		string processed = StrOps.concat("Processed: ", upper)
		return processed

function start()
	// Test module system with math utilities
	float pi = MathUtils.pi()
	float radius = 5.0
	float area = pi * MathUtils.pow(radius, 2)
	
	print("Circle area calculation using MathUtils:")
	print(area.toString())
	
	// Test string operations with alias
	string greeting = StrOps.concat("Hello", " World")
	boolean hasWorld = StrOps.contains(greeting, "World")
	print("String operations test:")
	print(greeting)
	print(hasWorld.toString())
	
	// Test async programming with module integration
	array numbers = [1, 2, 3, 4, 5]
	later result = start calculateInBackground(numbers)
	
	// Background file operations using imported module
	background FileReader.writeFile("output.txt", greeting)
	
	// Async text processing
	later processedText = start processTextAsync("hello async world")
	
	// Background logging
	background print("All async operations started")
	
	print("Main function completed - async operations running in background") 