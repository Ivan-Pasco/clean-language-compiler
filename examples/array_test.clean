// Array Operations Test Examples
// Comprehensive demonstration of Clean Language array capabilities
// Shows real-world usage patterns for data manipulation

functions:
    void start()
        println("=== Clean Language Array Operations Demo ===")
        
        // Basic Array Operations
        testBasicOperations()
        
        // Array Modification
        testModificationOperations()
        
        // Search and Find Operations
        testSearchOperations()
        
        // Array Transformation
        testTransformationOperations()
        
        // Functional Programming
        testFunctionalOperations()
        
        // Utility Functions
        testUtilityOperations()
        
        // Real-world Examples
        testRealWorldExamples()
        
        println("=== Array Demo Complete ===")

    void testBasicOperations()
        println("\n--- Basic Array Operations ---")
        
        // Creating and accessing arrays
        Array<integer> numbers = [10, 20, 30, 40, 50]
        println("Original array: [10, 20, 30, 40, 50]")
        
        // Get array length
        integer size = Array.length(numbers)
        println("Array length: " + size.toString())  // 5
        
        // Access elements by index
        integer first = Array.get(numbers, 0)
        integer middle = Array.get(numbers, 2)
        integer last = Array.get(numbers, 4)
        println("First element: " + first.toString())   // 10
        println("Middle element: " + middle.toString()) // 30
        println("Last element: " + last.toString())     // 50
        
        // Update elements
        Array.set(numbers, 1, 99)
        println("After setting index 1 to 99: [10, 99, 30, 40, 50]")
        
        // Check if array is empty
        Array<string> emptyArray = []
        boolean isEmpty = Array.isEmpty(emptyArray)
        boolean isNotEmpty = Array.isNotEmpty(numbers)
        println("Empty array is empty: " + isEmpty.toString())      // true
        println("Numbers array is not empty: " + isNotEmpty.toString()) // true

    void testModificationOperations()
        println("\n--- Array Modification Operations ---")
        
        // Building arrays dynamically
        Array<string> fruits = ["apple", "banana"]
        println("Starting fruits: [apple, banana]")
        
        // Add elements to the end
        fruits = Array.push(fruits, "orange")
        fruits = Array.push(fruits, "grape")
        println("After pushing orange and grape: [apple, banana, orange, grape]")
        
        // Remove elements from the end
        string removed = Array.pop(fruits)
        println("Popped element: " + removed)  // grape
        println("Array after pop: [apple, banana, orange]")
        
        // Insert elements at specific positions
        fruits = Array.insert(fruits, 1, "mango")
        println("After inserting mango at index 1: [apple, mango, banana, orange]")
        
        // Remove elements from specific positions
        string removedFruit = Array.remove(fruits, 2)
        println("Removed element at index 2: " + removedFruit)  // banana
        println("Array after removal: [apple, mango, orange]")

    void testSearchOperations()
        println("\n--- Search and Find Operations ---")
        
        Array<integer> scores = [85, 92, 78, 96, 88, 92, 75]
        println("Test scores: [85, 92, 78, 96, 88, 92, 75]")
        
        // Check if array contains specific values
        boolean hasHighScore = Array.contains(scores, 96)
        boolean hasLowScore = Array.contains(scores, 60)
        println("Contains 96: " + hasHighScore.toString())  // true
        println("Contains 60: " + hasLowScore.toString())   // false
        
        // Find positions of elements
        integer firstNinetyTwo = Array.indexOf(scores, 92)
        integer lastNinetyTwo = Array.lastIndexOf(scores, 92)
        integer notFound = Array.indexOf(scores, 100)
        println("First occurrence of 92 at index: " + firstNinetyTwo.toString())  // 1
        println("Last occurrence of 92 at index: " + lastNinetyTwo.toString())    // 5
        println("Index of 100 (not found): " + notFound.toString())               // -1
        
        // Get first and last elements easily
        integer firstScore = Array.first(scores)
        integer lastScore = Array.last(scores)
        println("First score: " + firstScore.toString())  // 85
        println("Last score: " + lastScore.toString())    // 75

    void testTransformationOperations()
        println("\n--- Array Transformation Operations ---")
        
        Array<integer> original = [1, 2, 3, 4, 5]
        println("Original array: [1, 2, 3, 4, 5]")
        
        // Extract sections of arrays
        Array<integer> middle = Array.slice(original, 1, 4)
        println("Slice from index 1 to 4: [2, 3, 4]")
        
        // Combine arrays
        Array<integer> moreNumbers = [6, 7, 8]
        Array<integer> combined = Array.concat(original, moreNumbers)
        println("Combined with [6, 7, 8]: [1, 2, 3, 4, 5, 6, 7, 8]")
        
        // Reverse array order
        Array<integer> reversed = Array.reverse(original)
        println("Reversed: [5, 4, 3, 2, 1]")
        
        // Sort arrays
        Array<integer> unsorted = [3, 1, 4, 1, 5, 9, 2, 6]
        Array<integer> sorted = Array.sort(unsorted)
        println("Unsorted: [3, 1, 4, 1, 5, 9, 2, 6]")
        println("Sorted: [1, 1, 2, 3, 4, 5, 6, 9]")

    void testFunctionalOperations()
        println("\n--- Functional Programming Operations ---")
        
        Array<integer> numbers = [1, 2, 3, 4, 5]
        println("Original numbers: [1, 2, 3, 4, 5]")
        
        // Transform each element
        Array<integer> doubled = Array.map(numbers, x => x * 2)
        println("Doubled (map): [2, 4, 6, 8, 10]")
        
        Array<integer> squared = Array.map(numbers, x => x * x)
        println("Squared (map): [1, 4, 9, 16, 25]")
        
        // Filter elements based on conditions
        Array<integer> evens = Array.filter(numbers, x => x % 2 == 0)
        println("Even numbers (filter): [2, 4]")
        
        Array<integer> greaterThanThree = Array.filter(numbers, x => x > 3)
        println("Greater than 3 (filter): [4, 5]")
        
        // Reduce to single value
        integer sum = Array.reduce(numbers, (total, x) => total + x, 0)
        integer product = Array.reduce(numbers, (total, x) => total * x, 1)
        println("Sum (reduce): " + sum.toString())      // 15
        println("Product (reduce): " + product.toString()) // 120
        
        // Execute function for each element
        println("Printing each number:")
        Array.forEach(numbers, x => println("  Number: " + x.toString()))

    void testUtilityOperations()
        println("\n--- Utility Operations ---")
        
        // Create arrays programmatically
        Array<string> hellos = Array.fill(4, "Hello")
        println("Filled array: [Hello, Hello, Hello, Hello]")
        
        Array<integer> countdown = Array.range(5, 1)
        println("Range 5 to 1: [5, 4, 3, 2, 1]")
        
        Array<integer> countup = Array.range(1, 10)
        println("Range 1 to 10: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]")
        
        // Join arrays into strings
        Array<string> words = ["Clean", "Language", "is", "awesome"]
        string sentence = Array.join(words, " ")
        string csv = Array.join(words, ", ")
        println("Joined with spaces: " + sentence)
        println("Joined with commas: " + csv)

    void testRealWorldExamples()
        println("\n--- Real-World Examples ---")
        
        // Example 1: Processing student grades
        println("Example 1: Student Grade Processing")
        Array<integer> grades = [85, 92, 78, 96, 88, 73, 91, 84]
        
        integer totalStudents = Array.length(grades)
        integer highestGrade = Array.last(Array.sort(grades))
        integer lowestGrade = Array.first(Array.sort(grades))
        Array<integer> passingGrades = Array.filter(grades, grade => grade >= 80)
        integer averageGrade = Array.reduce(grades, (sum, grade) => sum + grade, 0) / totalStudents
        
        println("Total students: " + totalStudents.toString())
        println("Highest grade: " + highestGrade.toString())
        println("Lowest grade: " + lowestGrade.toString())
        println("Passing grades count: " + Array.length(passingGrades).toString())
        println("Average grade: " + averageGrade.toString())
        
        // Example 2: Shopping cart management
        println("\nExample 2: Shopping Cart Management")
        Array<string> cart = []
        
        // Add items to cart
        cart = Array.push(cart, "Laptop")
        cart = Array.push(cart, "Mouse")
        cart = Array.push(cart, "Keyboard")
        cart = Array.push(cart, "Monitor")
        
        println("Cart contents: " + Array.join(cart, ", "))
        
        // Remove an item
        boolean hasKeyboard = Array.contains(cart, "Keyboard")
        if hasKeyboard
            integer keyboardIndex = Array.indexOf(cart, "Keyboard")
            string removed = Array.remove(cart, keyboardIndex)
            println("Removed: " + removed)
        
        println("Updated cart: " + Array.join(cart, ", "))
        
        // Example 3: Data analysis
        println("\nExample 3: Sales Data Analysis")
        Array<integer> monthlySales = [12000, 15000, 18000, 14000, 22000, 19000]
        Array<string> months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun"]
        
        integer totalSales = Array.reduce(monthlySales, (sum, sales) => sum + sales, 0)
        integer bestMonth = Array.indexOf(monthlySales, Array.last(Array.sort(monthlySales)))
        Array<integer> strongMonths = Array.filter(monthlySales, sales => sales > 15000)
        
        println("Total sales: $" + totalSales.toString())
        println("Best performing month: " + Array.get(months, bestMonth))
        println("Strong months count: " + Array.length(strongMonths).toString())
        
        // Create sales report
        Array<string> report = []
        Array.forEach(monthlySales, (sales, index) => {
            string monthName = Array.get(months, index)
            string line = monthName + ": $" + sales.toString()
            report = Array.push(report, line)
        })
        
        println("Sales Report:")
        Array.forEach(report, line => println("  " + line)) 