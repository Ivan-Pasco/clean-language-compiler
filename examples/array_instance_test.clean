// Array Instance Methods Test - Clean Language
// Demonstrates the intuitive array.method() syntax for common operations

functions:
    void start()
        // Create test arrays
        numbers = [1, 2, 3, 4, 5]
        fruits = ["apple", "banana", "cherry"]
        empty = []
        
        println("=== Array Instance Methods Demo ===")
        
        // Basic array information
        println("Numbers array: " + Array.join(numbers, ", "))
        println("Array length: " + numbers.length())
        println("Is empty: " + empty.isEmpty())
        println("Is not empty: " + numbers.isNotEmpty())
        
        // Element access
        println("\n=== Element Access ===")
        println("First element: " + numbers.first())
        println("Last element: " + numbers.last())
        println("Element at index 2: " + numbers.get(2))
        
        // Search operations
        println("\n=== Search Operations ===")
        println("Contains 3: " + numbers.contains(3))
        println("Contains 10: " + numbers.contains(10))
        println("Index of 4: " + numbers.indexOf(4))
        println("Index of 99: " + numbers.indexOf(99))
        
        // Array manipulation
        println("\n=== Array Manipulation ===")
        
        // Push and pop
        mutable_numbers = numbers
        println("Before push: " + Array.join(mutable_numbers, ", "))
        mutable_numbers = mutable_numbers.push(6)
        println("After push(6): " + Array.join(mutable_numbers, ", "))
        
        popped = mutable_numbers.pop()
        println("Popped element: " + popped)
        println("After pop: " + Array.join(mutable_numbers, ", "))
        
        // Slice operations
        println("\n=== Slice Operations ===")
        slice1 = numbers.slice(1, 3)
        println("Slice(1, 3): " + Array.join(slice1, ", "))
        
        slice2 = numbers.slice(0, 2)
        println("Slice(0, 2): " + Array.join(slice2, ", "))
        
        // Array combination
        println("\n=== Array Combination ===")
        combined = numbers.concat(fruits)
        println("Numbers + Fruits: " + Array.join(combined, " | "))
        
        // Array transformation
        println("\n=== Array Transformation ===")
        reversed = numbers.reverse()
        println("Reversed numbers: " + Array.join(reversed, ", "))
        
        // String operations
        println("\n=== String Operations ===")
        joined_default = numbers.join(", ")
        println("Joined with comma: " + joined_default)
        
        joined_custom = fruits.join(" -> ")
        println("Fruits with arrow: " + joined_custom)
        
        // Practical examples
        println("\n=== Practical Examples ===")
        
        // Shopping cart simulation
        cart = ["laptop", "mouse"]
        println("Shopping cart: " + cart.join(", "))
        
        cart = cart.push("keyboard")
        println("Added keyboard: " + cart.join(", "))
        
        if cart.contains("laptop")
            println("Laptop is in cart at position: " + cart.indexOf("laptop"))
        end
        
        // Task list management
        tasks = ["write code", "test features", "deploy"]
        println("\nTask list (" + tasks.length() + " items):")
        
        if tasks.isNotEmpty()
            println("First task: " + tasks.first())
            println("Last task: " + tasks.last())
            
            // Get middle tasks
            if tasks.length() > 2
                middle_tasks = tasks.slice(1, tasks.length() - 1)
                println("Middle tasks: " + middle_tasks.join(", "))
            end
        end
        
        // Data processing pipeline
        println("\n=== Data Processing Pipeline ===")
        data = [10, 20, 30, 40, 50]
        println("Original data: " + data.join(", "))
        
        // Check if we have data
        if data.isNotEmpty()
            println("Processing " + data.length() + " items...")
            
            // Get first and last for range
            println("Range: " + data.first() + " to " + data.last())
            
            // Get subset for processing
            subset = data.slice(1, 4)
            println("Processing subset: " + subset.join(", "))
            
            // Reverse for different order
            reversed_data = subset.reverse()
            println("Reversed processing order: " + reversed_data.join(", "))
        end
        
        println("\n=== Instance Methods Summary ===")
        println("✓ array.length() - Get array size")
        println("✓ array.isEmpty() - Check if empty")
        println("✓ array.isNotEmpty() - Check if has elements")
        println("✓ array.first() - Get first element")
        println("✓ array.last() - Get last element")
        println("✓ array.get(index) - Get element at index")
        println("✓ array.set(index, value) - Set element at index")
        println("✓ array.push(item) - Add element to end")
        println("✓ array.pop() - Remove and return last element")
        println("✓ array.contains(item) - Check if item exists")
        println("✓ array.indexOf(item) - Find index of item")
        println("✓ array.slice(start, end) - Extract portion")
        println("✓ array.concat(other) - Combine arrays")
        println("✓ array.reverse() - Reverse elements")
        println("✓ array.join(separator) - Join to string")
        println("✓ array.map(callback) - Transform elements")
        println("✓ array.iterate(callback) - Process each element")
        
        println("\nArray instance methods make Clean Language arrays intuitive and powerful!")
end 