// ArrayOps module - Array manipulation utilities
// All functions are public and can be imported by other modules
// Comprehensive array processing capabilities for data manipulation
// Uses existing array_ops.rs functions from the standard library

// Basic operations - using existing array_ops.rs functions
public function length(Array<Any> array) -> number
    // Returns the number of elements in the array
    // Perfect for validation and loop bounds
    // Uses existing array.length function from stdlib
    return array.length()

public function get(Array<Any> array, number index) -> Any
    // Gets the element at the specified position
    // Returns the value stored at that index
    // Uses existing array.get function from stdlib
    return array.get(index)

public function set(Array<Any> array, number index, Any value) -> void
    // Sets the element at the specified position
    // Updates the array with the new value
    // Uses existing array.set function from stdlib
    array.set(index, value)

// Modification operations - dynamic array changes
public function push(Array<Any> array, Any item) -> Array<Any>
    // Adds an element to the end of the array
    // Like adding a new item to the end of a list
    // Uses array_push function from stdlib
    return array_push(array, item)

public function pop(Array<Any> array) -> Any
    // Removes and returns the last element from the array
    // Like taking the top item off a stack
    // Uses array_pop function from stdlib
    return array_pop(array)

public function insert(Array<Any> array, number index, Any item) -> Array<Any>
    // Inserts an element at a specific position
    // Shifts existing elements to make room
    // Uses array_insert function from stdlib
    return array_insert(array, index, item)

public function remove(Array<Any> array, number index) -> Any
    // Removes and returns the element at the specified position
    // Shifts remaining elements to fill the gap
    // Uses array_remove function from stdlib
    return array_remove(array, index)

// Search operations - finding elements in arrays
public function contains(Array<Any> array, Any item) -> boolean
    // Checks if the array contains the specified item
    // Returns true if found, false otherwise
    // Uses array_contains function from stdlib
    return array_contains(array, item)

public function indexOf(Array<Any> array, Any item) -> number
    // Finds the first position of the item in the array
    // Returns -1 if not found, position index if found
    // Uses array_index_of function from stdlib
    return array_index_of(array, item)

public function lastIndexOf(Array<Any> array, Any item) -> number
    // Finds the last position of the item in the array
    // Useful for finding the final occurrence of repeated items
    // Uses array_last_index_of function from stdlib
    return array_last_index_of(array, item)

// Array transformation operations - creating new arrays from existing ones
public function slice(Array<Any> array, number start, number end) -> Array<Any>
    // Creates a new array containing elements from start to end position
    // Like cutting out a section of the original array
    // Uses array_slice function from stdlib
    return array_slice(array, start, end)

public function concat(Array<Any> array1, Array<Any> array2) -> Array<Any>
    // Combines two arrays into a single new array
    // Like joining two lists together
    // Uses array_concat function from stdlib
    return array_concat(array1, array2)

public function reverse(Array<Any> array) -> Array<Any>
    // Creates a new array with elements in reverse order
    // Like flipping the array upside down
    // Uses array_reverse function from stdlib
    return array_reverse(array)

public function sort(Array<Any> array) -> Array<Any>
    // Creates a new array with elements sorted in ascending order
    // Like organizing items from smallest to largest
    // Uses array_sort function from stdlib
    return array_sort(array)

// Functional programming operations - advanced array processing
public function map(Array<Any> array, function callback) -> Array<Any>
    // Creates a new array by applying a function to each element
    // Like transforming every item in the array
    // Uses existing array.map function from stdlib
    return array.map(callback)

public function filter(Array<Any> array, function callback) -> Array<Any>
    // Creates a new array containing only elements that pass a test
    // Like keeping only the items that meet certain criteria
    // Uses array_filter function from stdlib
    return array_filter(array, callback)

public function reduce(Array<Any> array, function callback, Any initialValue) -> Any
    // Reduces the array to a single value by applying a function
    // Like combining all elements into one result
    // Uses array_reduce function from stdlib
    return array_reduce(array, callback, initialValue)

public function forEach(Array<Any> array, function callback) -> void
    // Executes a function for each element in the array
    // Like doing something with every item in the array
    // Uses existing array.iterate function from stdlib
    array.iterate(callback)

// Utility operations - helpful array functions
public function isEmpty(Array<Any> array) -> boolean
    // Checks if the array has no elements
    // Like checking if a box is completely empty
    return length(array) == 0

public function isNotEmpty(Array<Any> array) -> boolean
    // Checks if the array has at least one element
    // Opposite of isEmpty
    return !isEmpty(array)

public function first(Array<Any> array) -> Any
    // Gets the first element of the array
    // Like looking at the item at the front of the line
    return get(array, 0)

public function last(Array<Any> array) -> Any
    // Gets the last element of the array
    // Like looking at the item at the back of the line
    return get(array, length(array) - 1)

public function join(Array<string> array, string separator) -> string
    // Combines all array elements into a single string with separators
    // Like gluing text pieces together with a connector
    // Uses array_join function from stdlib
    return array_join(array, separator)

// Array creation helpers
public function fill(number size, Any value) -> Array<Any>
    // Creates a new array of specified size filled with the same value
    // Like making multiple copies of the same item
    // Uses array_fill function from stdlib
    return array_fill(size, value)

public function range(number start, number end) -> Array<number>
    // Creates an array of numbers from start to end
    // Like counting from one number to another
    // Uses array_range function from stdlib
    return array_range(start, end) 