// Complex syntax test file for Clean Language
// Tests various language features and edge cases

// Constants section with different types
constants:
    PI = 3.14159
    MAX_ITEMS = 100
    GREETING = "Hello, World!"
    IS_DEBUG = true

// Type definitions
types:
    Point3D:
        number:
            - x
            - y
            - z
    
    Color:
        number:
            - red
            - green
            - blue
        string:
            - name

// Class definitions with inheritance and complex methods
classes:
    Shape:
        properties:
            string:
                - name
            Point3D:
                - position
        methods:
            getPosition() returns Point3D
                this.position
            
            move(Point3D newPos)
                this.position = newPos
    
    Sphere inherits Shape:
        properties:
            number:
                - radius
            Color:
                - color
        methods:
            constructor(number r, Color c)
                this.radius = r
                this.color = c
                this.name = "Sphere"
                this.position = Point3D(0, 0, 0)
            
            getVolume() returns number
                4/3 * PI * this.radius * this.radius * this.radius
            
            setColor(Color newColor)
                this.color = newColor
                onError:
                    print "Failed to set color"

// Complex functions with error handling and nested control structures
functions:
    createColoredSpheres() returns Sphere[]
        input:
            number:
                - count
                - minRadius
                - maxRadius
            Color[]:
                - availableColors
        
        if count <= 0 or count > MAX_ITEMS:
            error "Invalid count specified"
        
        Sphere[] spheres
        number colorIndex = 0
        
        iterate i from 0 to count:
            // Calculate random radius between min and max
            number radius = minRadius + (maxRadius - minRadius) * random()
            
            // Cycle through available colors
            Color currentColor = availableColors[colorIndex]
            colorIndex = (colorIndex + 1) % length(availableColors)
            
            // Create and store sphere
            try:
                Sphere newSphere = Sphere(radius, currentColor)
                spheres[i] = newSphere
            onError:
                print "Failed to create sphere " + i
                continue
        
        return spheres

    processShapes() returns number
        input:
            Shape[]:
                - shapes
        
        number totalVolume = 0
        
        iterate shape in shapes:
            if shape is Sphere:
                Sphere sphere = shape as Sphere
                totalVolume = totalVolume + sphere.getVolume()
                
                // Test complex error handling
                try:
                    sphere.setColor(Color(255, 0, 0, "red"))
                onError:
                    print "Could not set color for sphere"
                    continue
        
        return totalVolume

// Main program entry point
start()
    // Initialize test data
    Color[] colors = [
        Color(255, 0, 0, "red"),
        Color(0, 255, 0, "green"),
        Color(0, 0, 255, "blue")
    ]
    
    // Test complex function calls and error handling
    try:
        Sphere[] spheres = createColoredSpheres(5, 1.0, 10.0, colors)
        number volume = processShapes(spheres)
        print "Total volume: " + volume
    onError:
        print "An error occurred in the main program"
        exit 1 