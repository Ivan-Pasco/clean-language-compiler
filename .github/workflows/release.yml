name: Release Clean Language Compiler

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: cln-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: cln-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: cln-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: cln-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: cln-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build binary
      run: cargo build --release --bin cln --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/cln

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.name }}.tar.gz cln
        cd -

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }}.zip cln.exe
        cd -

    - name: Upload binary artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}.tar.gz

    - name: Upload binary artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        release_name: Clean Language Compiler ${{ steps.tag_name.outputs.TAG_NAME }}
        draft: false
        prerelease: false
        body: |
          ## Clean Language Compiler ${{ steps.tag_name.outputs.TAG_NAME }}
          
          **Author:** Ivan Pasco Lizarraga  
          **Website:** https://www.cleanlanguage.dev  
          
          Pre-built binaries for the Clean Language compiler.
          
          ### Installation
          
          Download the appropriate binary for your platform and add it to your PATH.
          
          ### Platforms
          
          - **Linux x86_64**: `cln-linux-x86_64.tar.gz`
          - **Linux ARM64**: `cln-linux-aarch64.tar.gz`
          - **macOS x86_64**: `cln-macos-x86_64.tar.gz`
          - **macOS ARM64**: `cln-macos-aarch64.tar.gz`
          - **Windows x86_64**: `cln-windows-x86_64.exe.zip`
          
          ### Usage
          
          ```bash
          # Compile a Clean Language file
          cln compile hello.cln
          
          # Run a Clean Language program
          cln run hello.cln
          
          # Check version
          cln version
          ```
          
          For more information, visit: https://www.cleanlanguage.dev

    - name: Upload Linux x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cln-linux-x86_64/cln-linux-x86_64.tar.gz
        asset_name: cln-linux-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cln-linux-aarch64/cln-linux-aarch64.tar.gz
        asset_name: cln-linux-aarch64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cln-macos-x86_64/cln-macos-x86_64.tar.gz
        asset_name: cln-macos-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cln-macos-aarch64/cln-macos-aarch64.tar.gz
        asset_name: cln-macos-aarch64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cln-windows-x86_64/cln-windows-x86_64.exe.zip
        asset_name: cln-windows-x86_64.exe.zip
        asset_content_type: application/zip 