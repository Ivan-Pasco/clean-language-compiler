// Basic tokens
WHITESPACE = _{ " " | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Keywords and identifiers
keyword = { ("return" | "if" | "else" | "then" | "iterate" | "in" | "to" | "step" | "tests" | "error" | "function" | "functions" | "input" | "description" | "class" | "constructor" | "is" | "and" | "or" | "not" | "true" | "false" | "onError" | "constant" | "private" | "base" | "list" | "matrix" | "pairs" | "integer" | "number" | "boolean" | "string" | "void" | "any" | "import" | "from" | "as" | "later" | "background") ~ !(ASCII_ALPHANUMERIC | "_") }
identifier = @{ !keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
integer = @{ "-"? ~ ASCII_DIGIT+ }
float = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
number = _{ float | integer }
boolean = { "true" | "false" }

// Advanced size specifiers for types
size_specifier = { ":" ~ ASCII_DIGIT+ ~ ("u")? }

// String interpolation with {} syntax
string_content = @{ (!("\"" | "{" | "}") ~ ANY)+ }
string_interpolation = { "{" ~ (identifier ~ ("." ~ identifier)*) ~ "}" }
string_part = { string_content | string_interpolation }
string = { "\"" ~ string_part* ~ "\"" }

// Core types from specification
core_type = { 
    "boolean" |
    "integer" |
    "number" |
    "string" |
    "void" |
    "any"
}

// Advanced types with size specifiers
sized_type = { core_type ~ size_specifier }

// Composite types
matrix_type = { "matrix" ~ "<" ~ type_ ~ ">" }
list_type = { "list" ~ "<" ~ type_ ~ ">" }
pairs_type = { "pairs" ~ "<" ~ type_ ~ "," ~ type_ ~ ">" }

// Generic types
generic_type = { identifier ~ "<" ~ type_arguments ~ ">" }
type_parameter = @{ identifier }
type_parameters = { "<" ~ type_parameter ~ ("," ~ type_parameter)* ~ ">" }
type_arguments = { type_ ~ ("," ~ type_)* }

// Type definition
type_ = { 
    matrix_type |
    list_type |
    pairs_type |
    generic_type |
    sized_type |
    core_type |
    identifier |
    type_parameter
}

// Indentation-based blocks
INDENT = _{ " " | "\t" }
NEWLINE = _{ "\n" | "\r\n" }
empty_line = _{ INDENT* ~ NEWLINE }
indented_block = { NEWLINE ~ (empty_line)* ~ INDENT+ ~ statement ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ statement)* }

// Apply-blocks (core language feature) - Specification compliant
apply_block = { constant_apply_block | type_apply_block | method_apply_block | function_apply_block }

// Constant apply-blocks: constant: integer MAX_SIZE = 100 (most specific first)
constant_apply_block = { "constant" ~ ":" ~ indented_constant_assignments }
indented_constant_assignments = { NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ constant_assignment ~ (NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ constant_assignment)* }
constant_assignment = { type_ ~ identifier ~ "=" ~ expression }

// Type apply-blocks: integer: count = 0, maxSize = 100 (types before generic identifiers)
type_apply_block = { (core_type | sized_type | matrix_type | list_type | pairs_type) ~ ":" ~ indented_variable_assignments }
indented_variable_assignments = { NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ variable_assignment ~ (NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ variable_assignment)* }
variable_assignment = { identifier ~ "=" ~ expression }

// Method apply-blocks: array.push: item1, item2, item3 (object.method before generic identifiers)
method_apply_block = { method_call_chain ~ ":" ~ indented_expressions }
method_call_chain = { identifier ~ ("." ~ identifier)+ }

// Function apply-blocks: println: "Hello", "World" (catch-all for identifiers)
function_apply_block = { !("functions" ~ ":") ~ identifier ~ ":" ~ indented_expressions }
indented_expressions = { NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ expression ~ (NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ expression)* }

// Setup blocks for functions
description_block = { "description" ~ string }
input_type = { 
    sized_type |
    core_type |
    matrix_type |
    list_type |
    pairs_type |
    generic_type |
    type_parameter
}
input_declaration = { input_type ~ identifier ~ ("=" ~ expression)? }
standalone_input_declaration = { "input" ~ input_type ~ identifier ~ ("=" ~ expression)? }
input_block = { "input" ~ indented_input_block }
indented_input_block = { NEWLINE ~ (empty_line)* ~ INDENT+ ~ input_declaration ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ input_declaration)* }
indented_block_with_declarations = { NEWLINE ~ INDENT+ ~ input_declaration ~ (NEWLINE ~ INDENT+ ~ input_declaration)* }

setup_block = { (description_block ~ NEWLINE ~ input_block) | (input_block ~ NEWLINE ~ description_block) | input_block | description_block }

// Object access and method calls
builtin_class_name = { "list" | "file" | "http" | "math" }
function_call = { identifier ~ type_arguments? ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
method_call_base = { builtin_class_name | identifier | "(" ~ expression ~ ")" }
method_name = { identifier | "number" | "integer" | "boolean" }
method_call_segment = { "." ~ method_name ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }
method_call = { method_call_base ~ method_call_segment+ }
property_access = { identifier ~ ("." ~ identifier)+ }
list_access = { identifier ~ "[" ~ expression ~ "]" }

// Primary expressions
primary = { 
    conditional_expr |
    base_call |
    method_call |
    number |
    boolean |
    string |
    matrix_literal |
    list_literal |
    list_access |
    function_call |
    property_access |
    error_variable |
    identifier |
    "(" ~ expression ~ ")" |
    multiline_parenthesized_expr
}

// Base constructor call
base_call = { "base" ~ "(" ~ (expression ~ ("," ~ expression)*)? ~ ")" }

// Error variable (only valid in error contexts)
error_variable = { "error" ~ !(ASCII_ALPHANUMERIC | "_") }

// Conditional expressions: if condition then value else value
conditional_expr = { "if" ~ expression ~ "then" ~ expression ~ "else" ~ expression }

// Multi-line expressions within parentheses (allows newlines and indentation)
multiline_parenthesized_expr = { "(" ~ NEWLINE* ~ (INDENT* ~ multiline_expression)? ~ NEWLINE* ~ INDENT* ~ ")" }
multiline_expression = { primary ~ (NEWLINE* ~ INDENT* ~ (logical_op | comparison_op | arithmetic_op) ~ NEWLINE* ~ INDENT* ~ primary)* }

// Error handling with onError
on_error_expr = { base_expression ~ "onError" ~ base_expression }
on_error_block = { base_expression ~ "onError" ~ ":" ~ indented_block }

// Expression with proper operator precedence (logical < comparison < arithmetic < unary)
logical_expression = { comparison_expression ~ (logical_op ~ comparison_expression)* }
comparison_expression = { unary_expression ~ (comparison_op ~ unary_expression)* }
unary_expression = { unary_op* ~ arithmetic_expression }
arithmetic_expression = { primary ~ (arithmetic_op ~ primary)* }
base_expression = { logical_expression }
expression = { on_error_block | on_error_expr | base_expression }

// Operators with proper precedence levels
logical_op = { "and" | "or" }
comparison_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" | "is" }
unary_op = { "not" | "-" }
arithmetic_op = { "+" | "-" | "*" | "/" | "%" | "^" }

// Lists and Matrices
list_literal = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }
matrix_row = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]" }
matrix_literal = { "[" ~ matrix_row ~ ("," ~ matrix_row)* ~ "]" }

// Statements (removed - now defined below with async features)

// Type-first variable declarations (no let keyword)
variable_decl = { type_ ~ identifier ~ ("=" ~ expression)? }

// Print statements (explicit forms to handle non-parentheses syntax)
print_stmt = { "print" ~ expression }
printl_stmt = { "printl" ~ expression }
println_stmt = { "println" ~ expression }

// Assignment
assignment = { (property_access | identifier) ~ "=" ~ expression }

// Error statement (function call syntax)
error_stmt = { "error" ~ "(" ~ expression ~ ")" }


// Control flow with indentation
if_stmt = { "if" ~ expression ~ indented_block ~ (NEWLINE* ~ INDENT* ~ "else" ~ indented_block)? }

// Iteration
iterate_stmt = { "iterate" ~ identifier ~ "in" ~ expression ~ indented_block }
range_iterate_stmt = { "iterate" ~ identifier ~ "in" ~ expression ~ "to" ~ expression ~ ("step" ~ expression)? ~ indented_block }


// Test
test = { "test" ~ string ~ indented_block }

// Return
return_stmt = { "return" ~ expression? }

// Function declarations - All functions must be in functions: blocks per specification

// Parameter definitions for function declarations
parameter_list = { parameter ~ ("," ~ parameter)* }
parameter = { type_ ~ identifier ~ ("=" ~ expression)? }

// Functions block (the main supported syntax for function declarations)
functions_block = { "functions" ~ ":" ~ indented_functions_block }
indented_functions_block = { NEWLINE ~ (empty_line)* ~ INDENT+ ~ function_in_block ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ function_in_block)* }

// Function declaration inside functions block - Clean Language spec compliant
function_in_block = { function_type? ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ function_body }

// Function body can have setup blocks (description and input) or just statements
function_body = { 
    (NEWLINE ~ INDENT+ ~ setup_block ~ NEWLINE ~ INDENT+ ~ function_statements) | 
    (NEWLINE ~ INDENT+ ~ function_statements) 
}

// Function statements - statements inside function body
function_statements = { statement ~ (NEWLINE ~ INDENT+ ~ statement)* }

// Function return type (excludes generic identifiers)
function_type = { 
    sized_type |
    core_type |
    matrix_type |
    list_type |
    pairs_type |
    generic_type |
    type_parameter
}

// Private blocks
private_block = { "private" ~ ":" ~ indented_functions_block }

// Tests block
tests_block = { "tests" ~ ":" ~ indented_tests_block }
indented_tests_block = { NEWLINE ~ (empty_line)* ~ INDENT+ ~ test_case ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ test_case)* }
test_case = { named_test | anonymous_test }
named_test = { string ~ ":" ~ expression ~ "=" ~ expression }
anonymous_test = { expression ~ "=" ~ expression }

// Class definition with "is" inheritance
class_field = { type_ ~ identifier ~ ("=" ~ expression)? }
class_body_item = { functions_block | constructor | class_field }
indented_class_body = { NEWLINE ~ (empty_line)* ~ INDENT+ ~ class_body_item ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ class_body_item)* ~ (NEWLINE ~ (empty_line)*)? }

class_decl = { 
    "class" ~ identifier ~ 
    ("is" ~ type_)? ~ 
    indented_class_body?
}

constructor = { "constructor" ~ "(" ~ constructor_parameter_list? ~ ")" ~ constructor_block? }
constructor_block = { NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ statement ~ (NEWLINE ~ (empty_line)* ~ INDENT ~ INDENT+ ~ statement)* }
constructor_parameter_list = { constructor_parameter ~ ("," ~ constructor_parameter)* }
constructor_parameter = { (constructor_type ~ identifier) | identifier }
constructor_type = { 
    sized_type |
    core_type |
    matrix_type |
    list_type |
    pairs_type |
    generic_type |
    type_parameter
}

// Import statements - supports both specification and simple syntax
// import Math                    # simple module import
// import: Math                   # whole module (specification)
// import: Math.sqrt              # single symbol  
// import: Utils as U             # module alias
// import: Json.decode as jd      # symbol alias
import_item = { 
    (identifier ~ "." ~ identifier ~ "as" ~ identifier) |  // Math.sqrt as msqrt
    (identifier ~ "." ~ identifier) |                      // Math.sqrt
    (identifier ~ "as" ~ identifier) |                     // Utils as U
    identifier                                             // Math
}
import_list = { import_item ~ (NEWLINE ~ (empty_line)* ~ INDENT+ ~ import_item)* }
import_stmt = { ("import" ~ ":" ~ NEWLINE ~ (empty_line)* ~ INDENT+ ~ import_list) | ("import" ~ identifier) | ("import" ~ ":" ~ import_item) }

// Async expressions and statements  
later_assignment = { "later" ~ identifier ~ "=" ~ "start" ~ expression }
background_stmt = { "background" ~ expression }

// Update statements to include async features and imports
statement = {
    return_stmt |
    error_stmt |
    on_error_block |
    if_stmt |
    iterate_stmt |
    range_iterate_stmt |
    test |
    later_assignment |
    background_stmt |
    standalone_input_declaration |
    apply_block |
    print_stmt |
    printl_stmt |
    println_stmt |
    variable_decl |
    assignment |
    expression
}

// Program with proper newline handling
program_item = { import_stmt | start_function | implicit_start_function | functions_block | tests_block | class_decl | statement }
program = { SOI ~ NEWLINE* ~ (program_item ~ NEWLINE*)* ~ EOI }

// Start function - the entry point of a Clean Language program
start_function = { "start" ~ "(" ~ ")" ~ indented_block }
implicit_start_function = { "start" ~ "(" ~ ")" ~ indented_block } 